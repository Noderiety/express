"use strict";
require('traceur-source-maps').install(require('traceur'));
var ObjectId = require('mongoose').Types.ObjectId,
    Thread = require('../models/thread'),
    Post = require('../models/post');
function thread(req, res) {
  new Thread({
    title: req.param('title'),
    author: req.param('author')
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function post(req, res) {
  var threadId = new ObjectId(req.param('thread')),
      postValue = req.query.post;
  new Post({
    thread: threadId,
    post: postValue
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function list(req, res) {
  Thread.promise.find().then((function(threads) {
    return res.send(threads);
  })).done();
}
function show(req, res) {
  var title = req.param('title');
  Thread.promise.findOne({title: title}).then((function(thread) {
    return Post.promise.find({thread: thread._id}).then((function(posts) {
      return res.send({
        thread: thread,
        posts: posts
      });
    }));
  })).done();
}
module.exports = {
  post: post,
  list: list,
  show: show,
  thread: thread
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2Jhc2UuZXM2LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTSxBQUFDLENBQUMscUJBQW9CLENBQUMsUUFBUSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQU10RCxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxNQUFNLFNBQVM7QUFDNUMsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUM7QUFDbkMsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZ0JBQWUsQ0FBQztBQUVuQyxPQUFTLE9BQUssQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0FBQ3JCLElBQUksT0FBSyxBQUFDLENBQUM7QUFBQyxRQUFJLENBQUcsQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQztBQUFHLFNBQUssQ0FBRyxDQUFBLEdBQUUsTUFBTSxBQUFDLENBQUMsUUFBTyxDQUFDO0FBQUEsRUFBQyxDQUFDLFFBQVEsS0FBSyxBQUFDLEVBQUMsS0FDNUUsQUFBQyxFQUFDLFNBQUEsQUFBQztTQUFLLENBQUEsR0FBRSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUM7RUFBQSxFQUFDLEtBQ3ZCLEFBQUMsRUFBQyxDQUFDO0FBQ1g7QUFFQSxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0lBQ2YsQ0FBQSxRQUFPLEVBQUksSUFBSSxTQUFPLEFBQUMsQ0FBQyxHQUFFLE1BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQzNDLGNBQVEsRUFBSSxDQUFBLEdBQUUsTUFBTSxLQUFLO0FBRTdCLElBQUksS0FBRyxBQUFDLENBQUM7QUFBQyxTQUFLLENBQUcsU0FBTztBQUFHLE9BQUcsQ0FBRyxVQUFRO0FBQUEsRUFBQyxDQUFDLFFBQVEsS0FBSyxBQUFDLEVBQUMsS0FDckQsQUFBQyxFQUFDLFNBQUEsQUFBQztTQUFLLENBQUEsR0FBRSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUM7RUFBQSxFQUFDLEtBQ3ZCLEFBQUMsRUFBQyxDQUFDO0FBQ1g7QUFFQSxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0FBQ25CLE9BQUssUUFBUSxLQUFLLEFBQUMsRUFBQyxLQUNkLEFBQUMsRUFBQyxTQUFDLE9BQU07U0FBTSxDQUFBLEdBQUUsS0FBSyxBQUFDLENBQUMsT0FBTSxDQUFDO0VBQUEsRUFBQyxLQUNoQyxBQUFDLEVBQUMsQ0FBQztBQUNYO0FBR0EsT0FBUyxLQUFHLENBQUUsR0FBRSxDQUFHLENBQUEsR0FBRTtJQUNmLENBQUEsS0FBSSxFQUFJLENBQUEsR0FBRSxNQUFNLEFBQUMsQ0FBQyxPQUFNLENBQUM7QUFFN0IsT0FBSyxRQUFRLFFBQVEsQUFBQyxDQUFDLENBQUMsS0FBSSxDQUFHLE1BQUksQ0FBQyxDQUFDLEtBQy9CLEFBQUMsRUFBQyxTQUFDLE1BQUs7QUFDVixTQUFPLENBQUEsSUFBRyxRQUFRLEtBQUssQUFBQyxDQUFDLENBQUMsTUFBSyxDQUFHLENBQUEsTUFBSyxJQUFJLENBQUMsQ0FBQyxLQUN2QyxBQUFDLEVBQUMsU0FBQyxLQUFJO1dBQU0sQ0FBQSxHQUFFLEtBQUssQUFBQyxDQUFDO0FBQUMsYUFBSyxDQUFHLE9BQUs7QUFBRyxZQUFJLENBQUcsTUFBSTtBQUFBLE1BQUMsQ0FBQztJQUFBLEVBQUMsQ0FBQztFQUM5RCxFQUFDLEtBQ0csQUFBQyxFQUFDLENBQUM7QUFDWDtBQUVBLEtBQUssUUFBUSxFQUFJO0FBQ2YsS0FBRyxDQUFHLEtBQUc7QUFDVCxLQUFHLENBQUcsS0FBRztBQUNULEtBQUcsQ0FBRyxLQUFHO0FBQ1QsT0FBSyxDQUFHLE9BQUs7QUFBQSxBQUNmLENBQUM7QUFFRCIsImZpbGUiOiJjb250cm9sbGVycy9iYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgndHJhY2V1ci1zb3VyY2UtbWFwcycpLmluc3RhbGwocmVxdWlyZSgndHJhY2V1cicpKTsvKiBUaGUgQVBJIGNvbnRyb2xsZXJcbiAgIEV4cG9ydHMgMyBtZXRob2RzOlxuICAgKiBwb3N0IC0gQ3JlYXRlcyBhIG5ldyB0aHJlYWRcbiAgICogbGlzdCAtIFJldHVybnMgYSBsaXN0IG9mIHRocmVhZHNcbiAgICogc2hvdyAtIERpc3BsYXlzIGEgdGhyZWFkIGFuZCBpdHMgcG9zdHNcbiovXG5sZXQgT2JqZWN0SWQgPSByZXF1aXJlKCdtb25nb29zZScpLlR5cGVzLk9iamVjdElkLFxuICAgIFRocmVhZCA9IHJlcXVpcmUoJy4uL21vZGVscy90aHJlYWQnKSxcbiAgICBQb3N0ID0gcmVxdWlyZSgnLi4vbW9kZWxzL3Bvc3QnKTtcblxuZnVuY3Rpb24gdGhyZWFkKHJlcSwgcmVzKSB7XG4gIG5ldyBUaHJlYWQoe3RpdGxlOiByZXEucGFyYW0oJ3RpdGxlJyksIGF1dGhvcjogcmVxLnBhcmFtKCdhdXRob3InKX0pLnByb21pc2Uuc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gcmVzLmVuZCgnT2theScpKVxuICAgIC5kb25lKCk7XG59XG5cbmZ1bmN0aW9uIHBvc3QocmVxLCByZXMpIHtcbiAgbGV0IHRocmVhZElkID0gbmV3IE9iamVjdElkKHJlcS5wYXJhbSgndGhyZWFkJykpLFxuICAgICAgcG9zdFZhbHVlID0gcmVxLnF1ZXJ5LnBvc3Q7XG5cbiAgbmV3IFBvc3Qoe3RocmVhZDogdGhyZWFkSWQsIHBvc3Q6IHBvc3RWYWx1ZX0pLnByb21pc2Uuc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gcmVzLmVuZCgnT2theScpKVxuICAgIC5kb25lKCk7XG59XG5cbmZ1bmN0aW9uIGxpc3QocmVxLCByZXMpIHtcbiAgVGhyZWFkLnByb21pc2UuZmluZCgpXG4gICAgLnRoZW4oKHRocmVhZHMpID0+IHJlcy5zZW5kKHRocmVhZHMpKVxuICAgIC5kb25lKCk7XG59XG5cbi8vIGZpcnN0IGxvY2F0ZXMgYSB0aHJlYWQgYnkgdGl0bGUsIHRoZW4gbG9jYXRlcyB0aGUgcmVwbGllcyBieSB0aHJlYWQgSUQuXG5mdW5jdGlvbiBzaG93KHJlcSwgcmVzKSB7XG4gIGxldCB0aXRsZSA9IHJlcS5wYXJhbSgndGl0bGUnKTtcblxuICBUaHJlYWQucHJvbWlzZS5maW5kT25lKHt0aXRsZTogdGl0bGV9KVxuICAgIC50aGVuKCh0aHJlYWQpID0+IHtcbiAgICAgIHJldHVybiBQb3N0LnByb21pc2UuZmluZCh7dGhyZWFkOiB0aHJlYWQuX2lkfSlcbiAgICAgICAgLnRoZW4oKHBvc3RzKSA9PiByZXMuc2VuZCh7dGhyZWFkOiB0aHJlYWQsIHBvc3RzOiBwb3N0c30pKTtcbiAgICB9KVxuICAgIC5kb25lKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb3N0OiBwb3N0LFxuICBsaXN0OiBsaXN0LFxuICBzaG93OiBzaG93LFxuICB0aHJlYWQ6IHRocmVhZFxufTtcblxuIl19