"use strict";
require('traceur-source-maps').install(require('traceur'));
var ObjectId = require('mongoose').Types.ObjectId,
    Thread = require('../models/thread'),
    Post = require('../models/post');
function thread(req, res) {
  new Thread({
    title: req.param('title'),
    author: req.param('author')
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function post(req, res) {
  var threadId = new ObjectId(req.param('thread')),
      postValue = req.query.post;
  new Post({
    thread: threadId,
    post: postValue
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function list(req, res) {
  Thread.find().exec().then((function(threads) {
    return res.send(threads);
  })).done();
}
function show(req, res) {
  var title = req.param('title');
  Thread.promise.findOne({title: title}).then((function(thread) {
    return Post.promise.find({thread: thread._id}).then((function(posts) {
      return res.send([{
        thread: thread,
        posts: posts
      }]);
    }));
  })).done();
}
module.exports = {
  post: post,
  list: list,
  show: show,
  thread: thread
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2Jhc2UuZXM2LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTSxBQUFDLENBQUMscUJBQW9CLENBQUMsUUFBUSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQU10RCxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxNQUFNLFNBQVM7QUFDNUMsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUM7QUFDbkMsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZ0JBQWUsQ0FBQztBQUVuQyxPQUFTLE9BQUssQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0FBQ3JCLElBQUksT0FBSyxBQUFDLENBQUM7QUFBQyxRQUFJLENBQUcsQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQztBQUFHLFNBQUssQ0FBRyxDQUFBLEdBQUUsTUFBTSxBQUFDLENBQUMsUUFBTyxDQUFDO0FBQUEsRUFBQyxDQUFDLFFBQVEsS0FBSyxBQUFDLEVBQUMsS0FDNUUsQUFBQyxFQUFDLFNBQUEsQUFBQztTQUFLLENBQUEsR0FBRSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUM7RUFBQSxFQUFDLEtBQ3ZCLEFBQUMsRUFBQyxDQUFDO0FBQ1g7QUFFQSxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0lBQ2YsQ0FBQSxRQUFPLEVBQUksSUFBSSxTQUFPLEFBQUMsQ0FBQyxHQUFFLE1BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQzNDLGNBQVEsRUFBSSxDQUFBLEdBQUUsTUFBTSxLQUFLO0FBRTdCLElBQUksS0FBRyxBQUFDLENBQUM7QUFBQyxTQUFLLENBQUcsU0FBTztBQUFHLE9BQUcsQ0FBRyxVQUFRO0FBQUEsRUFBQyxDQUFDLFFBQVEsS0FBSyxBQUFDLEVBQUMsS0FDckQsQUFBQyxFQUFDLFNBQUEsQUFBQztTQUFLLENBQUEsR0FBRSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUM7RUFBQSxFQUFDLEtBQ3ZCLEFBQUMsRUFBQyxDQUFDO0FBQ1g7QUFFQSxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0FBQ25CLE9BQUssS0FBSyxBQUFDLEVBQUMsS0FBSyxBQUFDLEVBQUMsS0FDYixBQUFDLEVBQUMsU0FBQyxPQUFNO1NBQU0sQ0FBQSxHQUFFLEtBQUssQUFBQyxDQUFDLE9BQU0sQ0FBQztFQUFBLEVBQUMsS0FDaEMsQUFBQyxFQUFDLENBQUM7QUFDWDtBQUdBLE9BQVMsS0FBRyxDQUFFLEdBQUUsQ0FBRyxDQUFBLEdBQUU7SUFDZixDQUFBLEtBQUksRUFBSSxDQUFBLEdBQUUsTUFBTSxBQUFDLENBQUMsT0FBTSxDQUFDO0FBRTdCLE9BQUssUUFBUSxRQUFRLEFBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBRyxNQUFJLENBQUMsQ0FBQyxLQUMvQixBQUFDLEVBQUMsU0FBQyxNQUFLO0FBQ1YsU0FBTyxDQUFBLElBQUcsUUFBUSxLQUFLLEFBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBRyxDQUFBLE1BQUssSUFBSSxDQUFDLENBQUMsS0FDdkMsQUFBQyxFQUFDLFNBQUMsS0FBSTtXQUFNLENBQUEsR0FBRSxLQUFLLEFBQUMsQ0FBQyxDQUFDO0FBQUMsYUFBSyxDQUFHLE9BQUs7QUFBRyxZQUFJLENBQUcsTUFBSTtBQUFBLE1BQUMsQ0FBQyxDQUFDO0lBQUEsRUFBQyxDQUFDO0VBQ2hFLEVBQUMsS0FDRyxBQUFDLEVBQUMsQ0FBQztBQUNYO0FBRUEsS0FBSyxRQUFRLEVBQUk7QUFDZixLQUFHLENBQUcsS0FBRztBQUNULEtBQUcsQ0FBRyxLQUFHO0FBQ1QsS0FBRyxDQUFHLEtBQUc7QUFDVCxPQUFLLENBQUcsT0FBSztBQUFBLEFBQ2YsQ0FBQztBQUVEIiwiZmlsZSI6ImNvbnRyb2xsZXJzL2Jhc2UuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCd0cmFjZXVyLXNvdXJjZS1tYXBzJykuaW5zdGFsbChyZXF1aXJlKCd0cmFjZXVyJykpOy8qIFRoZSBBUEkgY29udHJvbGxlclxuICAgRXhwb3J0cyAzIG1ldGhvZHM6XG4gICAqIHBvc3QgLSBDcmVhdGVzIGEgbmV3IHRocmVhZFxuICAgKiBsaXN0IC0gUmV0dXJucyBhIGxpc3Qgb2YgdGhyZWFkc1xuICAgKiBzaG93IC0gRGlzcGxheXMgYSB0aHJlYWQgYW5kIGl0cyBwb3N0c1xuKi9cbmxldCBPYmplY3RJZCA9IHJlcXVpcmUoJ21vbmdvb3NlJykuVHlwZXMuT2JqZWN0SWQsXG4gICAgVGhyZWFkID0gcmVxdWlyZSgnLi4vbW9kZWxzL3RocmVhZCcpLFxuICAgIFBvc3QgPSByZXF1aXJlKCcuLi9tb2RlbHMvcG9zdCcpO1xuXG5mdW5jdGlvbiB0aHJlYWQocmVxLCByZXMpIHtcbiAgbmV3IFRocmVhZCh7dGl0bGU6IHJlcS5wYXJhbSgndGl0bGUnKSwgYXV0aG9yOiByZXEucGFyYW0oJ2F1dGhvcicpfSkucHJvbWlzZS5zYXZlKClcbiAgICAudGhlbigoKSA9PiByZXMuZW5kKCdPa2F5JykpXG4gICAgLmRvbmUoKTtcbn1cblxuZnVuY3Rpb24gcG9zdChyZXEsIHJlcykge1xuICBsZXQgdGhyZWFkSWQgPSBuZXcgT2JqZWN0SWQocmVxLnBhcmFtKCd0aHJlYWQnKSksXG4gICAgICBwb3N0VmFsdWUgPSByZXEucXVlcnkucG9zdDtcblxuICBuZXcgUG9zdCh7dGhyZWFkOiB0aHJlYWRJZCwgcG9zdDogcG9zdFZhbHVlfSkucHJvbWlzZS5zYXZlKClcbiAgICAudGhlbigoKSA9PiByZXMuZW5kKCdPa2F5JykpXG4gICAgLmRvbmUoKTtcbn1cblxuZnVuY3Rpb24gbGlzdChyZXEsIHJlcykge1xuICBUaHJlYWQuZmluZCgpLmV4ZWMoKVxuICAgIC50aGVuKCh0aHJlYWRzKSA9PiByZXMuc2VuZCh0aHJlYWRzKSlcbiAgICAuZG9uZSgpO1xufVxuXG4vLyBmaXJzdCBsb2NhdGVzIGEgdGhyZWFkIGJ5IHRpdGxlLCB0aGVuIGxvY2F0ZXMgdGhlIHJlcGxpZXMgYnkgdGhyZWFkIElELlxuZnVuY3Rpb24gc2hvdyhyZXEsIHJlcykge1xuICBsZXQgdGl0bGUgPSByZXEucGFyYW0oJ3RpdGxlJyk7XG5cbiAgVGhyZWFkLnByb21pc2UuZmluZE9uZSh7dGl0bGU6IHRpdGxlfSlcbiAgICAudGhlbigodGhyZWFkKSA9PiB7XG4gICAgICByZXR1cm4gUG9zdC5wcm9taXNlLmZpbmQoe3RocmVhZDogdGhyZWFkLl9pZH0pXG4gICAgICAgIC50aGVuKChwb3N0cykgPT4gcmVzLnNlbmQoW3t0aHJlYWQ6IHRocmVhZCwgcG9zdHM6IHBvc3RzfV0pKTtcbiAgICB9KVxuICAgIC5kb25lKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb3N0OiBwb3N0LFxuICBsaXN0OiBsaXN0LFxuICBzaG93OiBzaG93LFxuICB0aHJlYWQ6IHRocmVhZFxufTtcblxuIl19