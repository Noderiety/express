"use strict";
require('traceur-source-maps').install(require('traceur'));
var express = require('express'),
    path = require('path'),
    hbs = require('express-hbs'),
    logger = require('morgan'),
    bodyParser = require('body-parser'),
    compress = require('compression'),
    favicon = require('static-favicon'),
    methodOverride = require('method-override'),
    p = require('songbird'),
    router = require('./middlewares/router'),
    trycatchMiddleware = require('./middlewares/trycatch'),
    databaseDriver;
var App = function App(config) {
  var server = this.server = express();
  this.config = config;
  hbs.registerHelper('ifvalue', function(conditional, options) {
    if (options.hash.value === conditional) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });
  server.set('port', config.server.port);
  server.engine('hbs', hbs.express3());
  server.set('views', path.join(__dirname, '..', 'views'));
  server.set('view engine', 'hbs');
  server.use(trycatchMiddleware()).use(compress()).use(favicon()).use(logger('dev')).use(bodyParser()).use(methodOverride()).use(express.static(path.join(__dirname, 'public'))).use(router()).use(function(req, res) {
    res.status(404).render('404', {title: 'Not Found :('});
  });
};
($traceurRuntime.createClass)(App, {
  configureSync: function(config) {
    databaseDriver = require('./drivers/' + config.database.type);
  },
  initialize: function() {
    return p.all([databaseDriver.initialize(this.config.database), this.server.promise.listen(this.server.get('port'))]);
  }
}, {});
module.exports = App;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5lczYuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQU0sQUFBQyxDQUFDLHFCQUFvQixDQUFDLFFBQVEsQUFBQyxDQUFDLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFDLENBQUM7RUFJdEQsQ0FBQSxPQUFNLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxTQUFRLENBQUM7QUFDM0IsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsTUFBSyxDQUFDO0FBQ3JCLE1BQUUsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGFBQVksQ0FBQztBQUMzQixTQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUM7QUFDekIsYUFBUyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsYUFBWSxDQUFDO0FBQ2xDLFdBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGFBQVksQ0FBQztBQUNoQyxVQUFNLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxnQkFBZSxDQUFDO0FBQ2xDLGlCQUFhLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQztBQUMxQyxJQUFBLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxVQUFTLENBQUM7QUFDdEIsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsc0JBQXFCLENBQUM7QUFDdkMscUJBQWlCLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyx3QkFBdUIsQ0FBQztBQUNyRCxpQkFBYTtRQUdqQixTQUFNLElBQUUsQ0FLTyxNQUFLO0lBQ1osQ0FBQSxNQUFLLEVBQUksQ0FBQSxJQUFHLE9BQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxFQUFDO0FBRW5DLEtBQUcsT0FBTyxFQUFJLE9BQUssQ0FBQztBQVdwQixJQUFFLGVBQWUsQUFBQyxDQUFDLFNBQVEsQ0FBRyxVQUFVLFdBQVUsQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUM1RCxPQUFJLE9BQU0sS0FBSyxNQUFNLElBQU0sWUFBVSxDQUFHO0FBQ3RDLFdBQU8sQ0FBQSxPQUFNLEdBQUcsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3pCLEtBQU87QUFDTCxXQUFPLENBQUEsT0FBTSxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztJQUM5QjtBQUFBLEVBQ0YsQ0FBQyxDQUFDO0FBS0YsT0FBSyxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsQ0FBQSxNQUFLLE9BQU8sS0FBSyxDQUFDLENBQUM7QUFDdEMsT0FBSyxPQUFPLEFBQUMsQ0FBQyxLQUFJLENBQUcsQ0FBQSxHQUFFLFNBQVMsQUFBQyxFQUFDLENBQUMsQ0FBQztBQUNwQyxPQUFLLElBQUksQUFBQyxDQUFDLE9BQU0sQ0FBRyxDQUFBLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLEtBQUcsQ0FBRyxRQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQUssSUFBSSxBQUFDLENBQUMsYUFBWSxDQUFHLE1BQUksQ0FBQyxDQUFDO0FBRWhDLE9BQUssSUFDQSxBQUFDLENBQUMsa0JBQWlCLEFBQUMsRUFBQyxDQUFDLElBQ3RCLEFBQUMsQ0FBQyxRQUFPLEFBQUMsRUFBQyxDQUFDLElBQ1osQUFBQyxDQUFDLE9BQU0sQUFBQyxFQUFDLENBQUMsSUFDWCxBQUFDLENBQUMsTUFBSyxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsSUFDZixBQUFDLENBQUMsVUFBUyxBQUFDLEVBQUMsQ0FBQyxJQUNkLEFBQUMsQ0FBQyxjQUFhLEFBQUMsRUFBQyxDQUFDLElBQ2xCLEFBQUMsQ0FBQyxPQUFNLE9BQU8sQUFBQyxDQUFDLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLFNBQU8sQ0FBQyxDQUFDLENBQUMsSUFDaEQsQUFBQyxDQUFDLE1BQUssQUFBQyxFQUFDLENBQUMsSUFDVixBQUFDLENBQUMsU0FBVSxHQUFFLENBQUcsQ0FBQSxHQUFFLENBQUc7QUFDdkIsTUFBRSxPQUFPLEFBQUMsQ0FBQyxHQUFFLENBQUMsT0FBTyxBQUFDLENBQUMsS0FBSSxDQUFHLEVBQUMsS0FBSSxDQUFHLGVBQWEsQ0FBQyxDQUFDLENBQUM7RUFDeEQsQ0FBQyxDQUFDO0FBU1I7QUN6RUEsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDO0FEbUIzQixjQUFZLENBQVosVUFBYyxNQUFLLENBQUc7QUFDcEIsaUJBQWEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFlBQVcsRUFBRSxDQUFBLE1BQUssU0FBUyxLQUFLLENBQUMsQ0FBQztFQUM3RDtBQThDQSxXQUFTLENBQVQsVUFBVSxBQUFDLENBQUU7QUFDWCxTQUFPLENBQUEsQ0FBQSxJQUFJLEFBQUMsQ0FBQyxDQUNYLGNBQWEsV0FBVyxBQUFDLENBQUMsSUFBRyxPQUFPLFNBQVMsQ0FBQyxDQUM5QyxDQUFBLElBQUcsT0FBTyxRQUFRLE9BQU8sQUFBQyxDQUFDLElBQUcsT0FBTyxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUNwRCxDQUFDLENBQUM7RUFDSjtBQUFBLEtDeEVtRjtBRDJFckYsS0FBSyxRQUFRLEVBQUksSUFBRSxDQUFDO0FBQ3BCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7LyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmxldCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyksXG4gICAgaGJzID0gcmVxdWlyZSgnZXhwcmVzcy1oYnMnKSxcbiAgICBsb2dnZXIgPSByZXF1aXJlKCdtb3JnYW4nKSxcbiAgICBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKSxcbiAgICBjb21wcmVzcyA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyksXG4gICAgZmF2aWNvbiA9IHJlcXVpcmUoJ3N0YXRpYy1mYXZpY29uJyksXG4gICAgbWV0aG9kT3ZlcnJpZGUgPSByZXF1aXJlKCdtZXRob2Qtb3ZlcnJpZGUnKSxcbiAgICBwID0gcmVxdWlyZSgnc29uZ2JpcmQnKSxcbiAgICByb3V0ZXIgPSByZXF1aXJlKCcuL21pZGRsZXdhcmVzL3JvdXRlcicpLFxuICAgIHRyeWNhdGNoTWlkZGxld2FyZSA9IHJlcXVpcmUoJy4vbWlkZGxld2FyZXMvdHJ5Y2F0Y2gnKSxcbiAgICBkYXRhYmFzZURyaXZlcjtcblxuXG5jbGFzcyBBcHAge1xuICBjb25maWd1cmVTeW5jKGNvbmZpZykge1xuICAgIGRhdGFiYXNlRHJpdmVyID0gcmVxdWlyZSgnLi9kcml2ZXJzLycrY29uZmlnLmRhdGFiYXNlLnR5cGUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIGxldCBzZXJ2ZXIgPSB0aGlzLnNlcnZlciA9IGV4cHJlc3MoKTtcblxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgaWYgY29uZHRpb25hbCBoZWxwZXIgZm9yIGhhbmRsZWJhcnNcbiAgICAgKlxuICAgICAqIFVzYWdlOlxuICAgICAqICAge3sjaWZ2YWx1ZSBlbnYgdmFsdWU9J2RldmVsb3BtZW50J319XG4gICAgICogICAgIGRvIHNvbWV0aGluZyBtYXJ2ZWxsb3VzXG4gICAgICogICB7ey9pZnZhbHVlfX1cbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgY2hlY2sgb3V0IHRoaXMgZ2lzdDogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGhldXRlci8zNTE1OTQ1XG4gICAgICovXG4gICAgaGJzLnJlZ2lzdGVySGVscGVyKCdpZnZhbHVlJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5oYXNoLnZhbHVlID09PSBjb25kaXRpb25hbCkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBFeHByZXNzIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgc2VydmVyLnNldCgncG9ydCcsIGNvbmZpZy5zZXJ2ZXIucG9ydCk7XG4gICAgc2VydmVyLmVuZ2luZSgnaGJzJywgaGJzLmV4cHJlc3MzKCkpO1xuICAgIHNlcnZlci5zZXQoJ3ZpZXdzJywgcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3ZpZXdzJykpO1xuICAgIHNlcnZlci5zZXQoJ3ZpZXcgZW5naW5lJywgJ2hicycpO1xuXG4gICAgc2VydmVyXG4gICAgICAudXNlKHRyeWNhdGNoTWlkZGxld2FyZSgpKVxuICAgICAgLnVzZShjb21wcmVzcygpKVxuICAgICAgLnVzZShmYXZpY29uKCkpXG4gICAgICAudXNlKGxvZ2dlcignZGV2JykpXG4gICAgICAudXNlKGJvZHlQYXJzZXIoKSlcbiAgICAgIC51c2UobWV0aG9kT3ZlcnJpZGUoKSlcbiAgICAgIC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSlcbiAgICAgIC51c2Uocm91dGVyKCkpXG4gICAgICAudXNlKGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXMuc3RhdHVzKDQwNCkucmVuZGVyKCc0MDQnLCB7dGl0bGU6ICdOb3QgRm91bmQgOignfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgcmV0dXJuIHAuYWxsKFtcbiAgICAgIGRhdGFiYXNlRHJpdmVyLmluaXRpYWxpemUodGhpcy5jb25maWcuZGF0YWJhc2UpLFxuICAgICAgdGhpcy5zZXJ2ZXIucHJvbWlzZS5saXN0ZW4odGhpcy5zZXJ2ZXIuZ2V0KCdwb3J0JykpXG4gICAgXSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==