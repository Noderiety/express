"use strict";
require('traceur-source-maps').install(require('traceur'));
var express = require('express'),
    path = require('path'),
    hbs = require('express-hbs'),
    logger = require('morgan'),
    bodyParser = require('body-parser'),
    compress = require('compression'),
    favicon = require('static-favicon'),
    methodOverride = require('method-override'),
    p = require('songbird'),
    router = require('./middlewares/router'),
    handle404 = require('./middlewares/handle404'),
    trycatchMiddleware = require('./middlewares/trycatch');
var App = function App(config) {
  var server = this.server = express();
  this.config = config;
  hbs.registerHelper('ifvalue', function(conditional, options) {
    if (options.hash.value === conditional) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });
  server.set('port', config.server.port);
  server.engine('hbs', hbs.express3());
  server.set('views', path.join(__dirname, '..', 'views'));
  server.set('view engine', 'hbs');
  server.use(trycatchMiddleware()).use(compress()).use(favicon()).use(logger('dev')).use(bodyParser()).use(methodOverride()).use(express.static(path.join(__dirname, 'public'))).use(router()).use(handle404());
};
($traceurRuntime.createClass)(App, {
  configureSync: function() {
    var DBDriver = require('./drivers/' + this.config.database.type);
    this.databaseDriver = new DBDriver(this.config.database);
  },
  initialize: function() {
    return p.all([this.databaseDriver.initialize(), this.server.promise.listen(this.server.get('port'))]);
  }
}, {});
module.exports = App;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5lczYuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQU0sQUFBQyxDQUFDLHFCQUFvQixDQUFDLFFBQVEsQUFBQyxDQUFDLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFDLENBQUM7RUFJdEQsQ0FBQSxPQUFNLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxTQUFRLENBQUM7QUFDM0IsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsTUFBSyxDQUFDO0FBQ3JCLE1BQUUsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGFBQVksQ0FBQztBQUMzQixTQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUM7QUFDekIsYUFBUyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsYUFBWSxDQUFDO0FBQ2xDLFdBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGFBQVksQ0FBQztBQUNoQyxVQUFNLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxnQkFBZSxDQUFDO0FBQ2xDLGlCQUFhLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQztBQUMxQyxJQUFBLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxVQUFTLENBQUM7QUFDdEIsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsc0JBQXFCLENBQUM7QUFDdkMsWUFBUSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMseUJBQXdCLENBQUM7QUFDN0MscUJBQWlCLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyx3QkFBdUIsQ0FBQztRQUV6RCxTQUFNLElBQUUsQ0FNTyxNQUFLO0lBQ1osQ0FBQSxNQUFLLEVBQUksQ0FBQSxJQUFHLE9BQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxFQUFDO0FBRW5DLEtBQUcsT0FBTyxFQUFJLE9BQUssQ0FBQztBQVdwQixJQUFFLGVBQWUsQUFBQyxDQUFDLFNBQVEsQ0FBRyxVQUFVLFdBQVUsQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUM1RCxPQUFJLE9BQU0sS0FBSyxNQUFNLElBQU0sWUFBVSxDQUFHO0FBQ3RDLFdBQU8sQ0FBQSxPQUFNLEdBQUcsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0lBQ3pCLEtBQU87QUFDTCxXQUFPLENBQUEsT0FBTSxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztJQUM5QjtBQUFBLEVBQ0YsQ0FBQyxDQUFDO0FBS0YsT0FBSyxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsQ0FBQSxNQUFLLE9BQU8sS0FBSyxDQUFDLENBQUM7QUFDdEMsT0FBSyxPQUFPLEFBQUMsQ0FBQyxLQUFJLENBQUcsQ0FBQSxHQUFFLFNBQVMsQUFBQyxFQUFDLENBQUMsQ0FBQztBQUNwQyxPQUFLLElBQUksQUFBQyxDQUFDLE9BQU0sQ0FBRyxDQUFBLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLEtBQUcsQ0FBRyxRQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQUssSUFBSSxBQUFDLENBQUMsYUFBWSxDQUFHLE1BQUksQ0FBQyxDQUFDO0FBRWhDLE9BQUssSUFDQSxBQUFDLENBQUMsa0JBQWlCLEFBQUMsRUFBQyxDQUFDLElBQ3RCLEFBQUMsQ0FBQyxRQUFPLEFBQUMsRUFBQyxDQUFDLElBQ1osQUFBQyxDQUFDLE9BQU0sQUFBQyxFQUFDLENBQUMsSUFDWCxBQUFDLENBQUMsTUFBSyxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsSUFDZixBQUFDLENBQUMsVUFBUyxBQUFDLEVBQUMsQ0FBQyxJQUNkLEFBQUMsQ0FBQyxjQUFhLEFBQUMsRUFBQyxDQUFDLElBQ2xCLEFBQUMsQ0FBQyxPQUFNLE9BQU8sQUFBQyxDQUFDLElBQUcsS0FBSyxBQUFDLENBQUMsU0FBUSxDQUFHLFNBQU8sQ0FBQyxDQUFDLENBQUMsSUFDaEQsQUFBQyxDQUFDLE1BQUssQUFBQyxFQUFDLENBQUMsSUFDVixBQUFDLENBQUMsU0FBUSxBQUFDLEVBQUMsQ0FBQyxDQUFDO0FBU3ZCO0FDdkVBLEFBQUMsZUFBYyxZQUFZLENBQUMsQUFBQztBRGtCM0IsY0FBWSxDQUFaLFVBQWEsQUFBQztNQUNSLENBQUEsUUFBTyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsWUFBVyxFQUFFLENBQUEsSUFBRyxPQUFPLFNBQVMsS0FBSyxDQUFDO0FBQzdELE9BQUcsZUFBZSxFQUFJLElBQUksU0FBTyxBQUFDLENBQUMsSUFBRyxPQUFPLFNBQVMsQ0FBQyxDQUFBO0VBQ3pEO0FBNENBLFdBQVMsQ0FBVCxVQUFVLEFBQUMsQ0FBRTtBQUNYLFNBQU8sQ0FBQSxDQUFBLElBQUksQUFBQyxDQUFDLENBQ1gsSUFBRyxlQUFlLFdBQVcsQUFBQyxFQUFDLENBQy9CLENBQUEsSUFBRyxPQUFPLFFBQVEsT0FBTyxBQUFDLENBQUMsSUFBRyxPQUFPLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDLENBQ3BELENBQUMsQ0FBQztFQUNKO0FBQUEsS0N0RW1GO0FEeUVyRixLQUFLLFFBQVEsRUFBSSxJQUFFLENBQUM7QUFDcEIiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgndHJhY2V1ci1zb3VyY2UtbWFwcycpLmluc3RhbGwocmVxdWlyZSgndHJhY2V1cicpKTsvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxubGV0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyksXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICBoYnMgPSByZXF1aXJlKCdleHByZXNzLWhicycpLFxuICAgIGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpLFxuICAgIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpLFxuICAgIGNvbXByZXNzID0gcmVxdWlyZSgnY29tcHJlc3Npb24nKSxcbiAgICBmYXZpY29uID0gcmVxdWlyZSgnc3RhdGljLWZhdmljb24nKSxcbiAgICBtZXRob2RPdmVycmlkZSA9IHJlcXVpcmUoJ21ldGhvZC1vdmVycmlkZScpLFxuICAgIHAgPSByZXF1aXJlKCdzb25nYmlyZCcpLFxuICAgIHJvdXRlciA9IHJlcXVpcmUoJy4vbWlkZGxld2FyZXMvcm91dGVyJyksXG4gICAgaGFuZGxlNDA0ID0gcmVxdWlyZSgnLi9taWRkbGV3YXJlcy9oYW5kbGU0MDQnKSxcbiAgICB0cnljYXRjaE1pZGRsZXdhcmUgPSByZXF1aXJlKCcuL21pZGRsZXdhcmVzL3RyeWNhdGNoJyk7XG5cbmNsYXNzIEFwcCB7XG4gIGNvbmZpZ3VyZVN5bmMoKSB7XG4gICAgbGV0IERCRHJpdmVyID0gcmVxdWlyZSgnLi9kcml2ZXJzLycrdGhpcy5jb25maWcuZGF0YWJhc2UudHlwZSk7XG4gICAgdGhpcy5kYXRhYmFzZURyaXZlciA9IG5ldyBEQkRyaXZlcih0aGlzLmNvbmZpZy5kYXRhYmFzZSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBsZXQgc2VydmVyID0gdGhpcy5zZXJ2ZXIgPSBleHByZXNzKCk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIGlmIGNvbmR0aW9uYWwgaGVscGVyIGZvciBoYW5kbGViYXJzXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKiAgIHt7I2lmdmFsdWUgZW52IHZhbHVlPSdkZXZlbG9wbWVudCd9fVxuICAgICAqICAgICBkbyBzb21ldGhpbmcgbWFydmVsbG91c1xuICAgICAqICAge3svaWZ2YWx1ZX19XG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIGNoZWNrIG91dCB0aGlzIGdpc3Q6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BoZXV0ZXIvMzUxNTk0NVxuICAgICAqL1xuICAgIGhicy5yZWdpc3RlckhlbHBlcignaWZ2YWx1ZScsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMuaGFzaC52YWx1ZSA9PT0gY29uZGl0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRXhwcmVzcyBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHNlcnZlci5zZXQoJ3BvcnQnLCBjb25maWcuc2VydmVyLnBvcnQpO1xuICAgIHNlcnZlci5lbmdpbmUoJ2hicycsIGhicy5leHByZXNzMygpKTtcbiAgICBzZXJ2ZXIuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICd2aWV3cycpKTtcbiAgICBzZXJ2ZXIuc2V0KCd2aWV3IGVuZ2luZScsICdoYnMnKTtcblxuICAgIHNlcnZlclxuICAgICAgLnVzZSh0cnljYXRjaE1pZGRsZXdhcmUoKSlcbiAgICAgIC51c2UoY29tcHJlc3MoKSlcbiAgICAgIC51c2UoZmF2aWNvbigpKVxuICAgICAgLnVzZShsb2dnZXIoJ2RldicpKVxuICAgICAgLnVzZShib2R5UGFyc2VyKCkpXG4gICAgICAudXNlKG1ldGhvZE92ZXJyaWRlKCkpXG4gICAgICAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSkpXG4gICAgICAudXNlKHJvdXRlcigpKVxuICAgICAgLnVzZShoYW5kbGU0MDQoKSk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHJldHVybiBwLmFsbChbXG4gICAgICB0aGlzLmRhdGFiYXNlRHJpdmVyLmluaXRpYWxpemUoKSxcbiAgICAgIHRoaXMuc2VydmVyLnByb21pc2UubGlzdGVuKHRoaXMuc2VydmVyLmdldCgncG9ydCcpKVxuICAgIF0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMikiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=