"use strict";
require('traceur-source-maps').install(require('traceur'));
var ObjectId = require('mongoose').Types.ObjectId,
    Thread = require('../models/thread'),
    Post = require('../models/post');
function list(req, res, cb) {
  Thread.promise.find().then((function(threads) {
    return res.send(threads);
  })).catch(cb);
}
function show(req, res, cb) {
  var title = req.param('title');
  Thread.promise.findOne({title: title}).then((function(thread) {
    return Post.promise.find({thread: thread._id}).then((function(posts) {
      return res.send({
        thread: thread,
        posts: posts
      });
    }));
  })).catch(cb);
}
function getPost(req, res, cb) {
  var id = req.param('id');
  Post.promise.findOne({_id: id}).then((function(post) {
    return res.send(post);
  })).catch(cb);
}
function thread(req, res, cb) {
  new Thread({
    title: req.param('title'),
    author: req.param('author')
  }).promise.save().then((function() {
    return res.end('Okay');
  })).catch(cb);
}
function post(req, res, cb) {
  var threadId = new ObjectId(req.param('thread')),
      postValue = req.param('post');
  new Post({
    thread: threadId,
    post: postValue
  }).promise.save().then((function() {
    return res.end('Okay');
  })).catch(cb);
}
module.exports = {
  show: show,
  list: list,
  getPost: getPost,
  thread: thread,
  post: post
};
if (process.env.NODE_ENV === 'testing') {
  _.extend(module.exports, {someInternalFunction: someInternalFunction});
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2Jhc2UuZXM2LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTSxBQUFDLENBQUMscUJBQW9CLENBQUMsUUFBUSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQU10RCxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxNQUFNLFNBQVM7QUFDNUMsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUM7QUFDbkMsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZ0JBQWUsQ0FBQztBQUduQyxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFLENBQUcsQ0FBQSxFQUFDO0FBQ3ZCLE9BQUssUUFBUSxLQUFLLEFBQUMsRUFBQyxLQUNkLEFBQUMsRUFBQyxTQUFDLE9BQU07U0FBTSxDQUFBLEdBQUUsS0FBSyxBQUFDLENBQUMsT0FBTSxDQUFDO0VBQUEsRUFBQyxNQUMvQixBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDZDtBQUlBLE9BQVMsS0FBRyxDQUFFLEdBQUUsQ0FBRyxDQUFBLEdBQUUsQ0FBRyxDQUFBLEVBQUM7SUFDbkIsQ0FBQSxLQUFJLEVBQUksQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQztBQUU3QixPQUFLLFFBQVEsUUFBUSxBQUFDLENBQUMsQ0FBQyxLQUFJLENBQUcsTUFBSSxDQUFDLENBQUMsS0FDL0IsQUFBQyxFQUFDLFNBQUMsTUFBSztBQUNWLFNBQU8sQ0FBQSxJQUFHLFFBQVEsS0FBSyxBQUFDLENBQUMsQ0FBQyxNQUFLLENBQUcsQ0FBQSxNQUFLLElBQUksQ0FBQyxDQUFDLEtBQ3ZDLEFBQUMsRUFBQyxTQUFDLEtBQUk7V0FBTSxDQUFBLEdBQUUsS0FBSyxBQUFDLENBQUM7QUFBQyxhQUFLLENBQUcsT0FBSztBQUFHLFlBQUksQ0FBRyxNQUFJO0FBQUEsTUFBQyxDQUFDO0lBQUEsRUFBQyxDQUFDO0VBQzlELEVBQUMsTUFDSSxBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDZDtBQUVBLE9BQVMsUUFBTSxDQUFFLEdBQUUsQ0FBRyxDQUFBLEdBQUUsQ0FBRyxDQUFBLEVBQUM7SUFDdEIsQ0FBQSxFQUFDLEVBQUksQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLElBQUcsQ0FBQztBQUV2QixLQUFHLFFBQVEsUUFBUSxBQUFDLENBQUMsQ0FBQyxHQUFFLENBQUcsR0FBQyxDQUFDLENBQUMsS0FDeEIsQUFBQyxFQUFDLFNBQUEsSUFBRztTQUFLLENBQUEsR0FBRSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUM7RUFBQSxFQUFDLE1BQ3ZCLEFBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtBQUNiO0FBR0EsT0FBUyxPQUFLLENBQUUsR0FBRSxDQUFHLENBQUEsR0FBRSxDQUFHLENBQUEsRUFBQztBQUN6QixJQUFJLE9BQUssQUFBQyxDQUFDO0FBQ1AsUUFBSSxDQUFHLENBQUEsR0FBRSxNQUFNLEFBQUMsQ0FBQyxPQUFNLENBQUM7QUFDeEIsU0FBSyxDQUFHLENBQUEsR0FBRSxNQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUM7QUFBQSxFQUM1QixDQUFDLFFBQ00sS0FBSyxBQUFDLEVBQUMsS0FDVixBQUFDLEVBQUMsU0FBQSxBQUFDO1NBQUssQ0FBQSxHQUFFLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQztFQUFBLEVBQUMsTUFDdEIsQUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQ2Q7QUFFQSxPQUFTLEtBQUcsQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFLENBQUcsQ0FBQSxFQUFDO0lBQ25CLENBQUEsUUFBTyxFQUFJLElBQUksU0FBTyxBQUFDLENBQUMsR0FBRSxNQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUMzQyxjQUFRLEVBQUksQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQztBQUVoQyxJQUFJLEtBQUcsQUFBQyxDQUFDO0FBQ0wsU0FBSyxDQUFHLFNBQU87QUFDZixPQUFHLENBQUcsVUFBUTtBQUFBLEVBQ2hCLENBQUMsUUFDTSxLQUFLLEFBQUMsRUFBQyxLQUNWLEFBQUMsRUFBQyxTQUFBLEFBQUM7U0FBSyxDQUFBLEdBQUUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFDO0VBQUEsRUFBQyxNQUN0QixBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDZDtBQUVBLEtBQUssUUFBUSxFQUFJO0FBQ2YsS0FBRyxDQUFHLEtBQUc7QUFDVCxLQUFHLENBQUcsS0FBRztBQUNULFFBQU0sQ0FBRyxRQUFNO0FBQ2YsT0FBSyxDQUFHLE9BQUs7QUFDYixLQUFHLENBQUcsS0FBRztBQUFBLEFBQ1gsQ0FBQztBQUVELEdBQUksT0FBTSxJQUFJLFNBQVMsSUFBTSxVQUFRLENBQUc7QUFDdEMsRUFBQSxPQUFPLEFBQUMsQ0FBQyxNQUFLLFFBQVEsQ0FBRyxFQUN2QixvQkFBbUIsQ0FBRyxxQkFBbUIsQ0FDM0MsQ0FBQyxDQUFBO0FBQ0g7QUFBQSIsImZpbGUiOiJjb250cm9sbGVycy9iYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgndHJhY2V1ci1zb3VyY2UtbWFwcycpLmluc3RhbGwocmVxdWlyZSgndHJhY2V1cicpKTsvKiBUaGUgQVBJIGNvbnRyb2xsZXJcbiAgIEV4cG9ydHMgMyBtZXRob2RzOlxuICAgKiBwb3N0IC0gQ3JlYXRlcyBhIG5ldyB0aHJlYWRcbiAgICogbGlzdCAtIFJldHVybnMgYSBsaXN0IG9mIHRocmVhZHNcbiAgICogc2hvdyAtIERpc3BsYXlzIGEgdGhyZWFkIGFuZCBpdHMgcG9zdHNcbiovXG5sZXQgT2JqZWN0SWQgPSByZXF1aXJlKCdtb25nb29zZScpLlR5cGVzLk9iamVjdElkLFxuICAgIFRocmVhZCA9IHJlcXVpcmUoJy4uL21vZGVscy90aHJlYWQnKSxcbiAgICBQb3N0ID0gcmVxdWlyZSgnLi4vbW9kZWxzL3Bvc3QnKVxuXG4vLyBHRVQgL3RocmVhZFxuZnVuY3Rpb24gbGlzdChyZXEsIHJlcywgY2IpIHtcbiAgVGhyZWFkLnByb21pc2UuZmluZCgpXG4gICAgLnRoZW4oKHRocmVhZHMpID0+IHJlcy5zZW5kKHRocmVhZHMpKVxuICAgIC5jYXRjaChjYik7XG59XG5cbi8vIEdFVCAvdGhyZWFkLzp0aXRsZVxuLy8gZmlyc3QgbG9jYXRlcyBhIHRocmVhZCBieSB0aXRsZSwgdGhlbiBsb2NhdGVzIHRoZSByZXBsaWVzIGJ5IHRocmVhZCBJRC5cbmZ1bmN0aW9uIHNob3cocmVxLCByZXMsIGNiKSB7XG4gIGxldCB0aXRsZSA9IHJlcS5wYXJhbSgndGl0bGUnKTtcblxuICBUaHJlYWQucHJvbWlzZS5maW5kT25lKHt0aXRsZTogdGl0bGV9KVxuICAgIC50aGVuKCh0aHJlYWQpID0+IHtcbiAgICAgIHJldHVybiBQb3N0LnByb21pc2UuZmluZCh7dGhyZWFkOiB0aHJlYWQuX2lkfSlcbiAgICAgICAgLnRoZW4oKHBvc3RzKSA9PiByZXMuc2VuZCh7dGhyZWFkOiB0aHJlYWQsIHBvc3RzOiBwb3N0c30pKTtcbiAgICB9KVxuICAgIC5jYXRjaChjYik7XG59XG5cbmZ1bmN0aW9uIGdldFBvc3QocmVxLCByZXMsIGNiKSB7XG4gIGxldCBpZCA9IHJlcS5wYXJhbSgnaWQnKVxuXG4gIFBvc3QucHJvbWlzZS5maW5kT25lKHtfaWQ6IGlkfSlcbiAgICAudGhlbihwb3N0ID0+IHJlcy5zZW5kKHBvc3QpKVxuICAgIC5jYXRjaChjYilcbn1cblxuLy8gUE9TVCAvdGhyZWFkXG5mdW5jdGlvbiB0aHJlYWQocmVxLCByZXMsIGNiKSB7XG4gIG5ldyBUaHJlYWQoe1xuICAgICAgdGl0bGU6IHJlcS5wYXJhbSgndGl0bGUnKSxcbiAgICAgIGF1dGhvcjogcmVxLnBhcmFtKCdhdXRob3InKVxuICAgIH0pXG4gICAgLnByb21pc2Uuc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gcmVzLmVuZCgnT2theScpKVxuICAgIC5jYXRjaChjYik7XG59XG5cbmZ1bmN0aW9uIHBvc3QocmVxLCByZXMsIGNiKSB7XG4gIGxldCB0aHJlYWRJZCA9IG5ldyBPYmplY3RJZChyZXEucGFyYW0oJ3RocmVhZCcpKSxcbiAgICAgIHBvc3RWYWx1ZSA9IHJlcS5wYXJhbSgncG9zdCcpO1xuXG4gIG5ldyBQb3N0KHtcbiAgICAgIHRocmVhZDogdGhyZWFkSWQsXG4gICAgICBwb3N0OiBwb3N0VmFsdWVcbiAgICB9KVxuICAgIC5wcm9taXNlLnNhdmUoKVxuICAgIC50aGVuKCgpID0+IHJlcy5lbmQoJ09rYXknKSlcbiAgICAuY2F0Y2goY2IpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2hvdzogc2hvdyxcbiAgbGlzdDogbGlzdCxcbiAgZ2V0UG9zdDogZ2V0UG9zdCxcbiAgdGhyZWFkOiB0aHJlYWQsXG4gIHBvc3Q6IHBvc3Rcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3RpbmcnKSB7XG4gIF8uZXh0ZW5kKG1vZHVsZS5leHBvcnRzLCB7XG4gICAgc29tZUludGVybmFsRnVuY3Rpb246IHNvbWVJbnRlcm5hbEZ1bmN0aW9uXG4gIH0pXG59XG5cblxuIl19