"use strict";
require('traceur-source-maps').install(require('traceur'));
var ObjectId = require('mongoose').Types.ObjectId,
    Thread = require('../models/thread'),
    Post = require('../models/post');
function thread(req, res) {
  new Thread({
    title: req.param('title'),
    author: req.param('author')
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function list(req, res) {
  Thread.promise.find().then((function(threads) {
    return res.send(threads);
  })).done();
}
function post(req, res) {
  var threadId = new ObjectId(req.param('thread')),
      postValue = req.query.post;
  new Post({
    thread: threadId,
    post: postValue
  }).promise.save().then((function() {
    return res.end('Okay');
  })).done();
}
function show(req, res) {
  var title = req.param('title');
  Thread.promise.findOne({title: title}).then((function(thread) {
    return Post.promise.find({thread: thread._id}).then((function(posts) {
      return res.send({
        thread: thread,
        posts: posts
      });
    }));
  })).done();
}
module.exports = {
  post: post,
  list: list,
  show: show,
  thread: thread
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2Jhc2UuZXM2LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTSxBQUFDLENBQUMscUJBQW9CLENBQUMsUUFBUSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQU10RCxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxNQUFNLFNBQVM7QUFDNUMsU0FBSyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsa0JBQWlCLENBQUM7QUFDbkMsT0FBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZ0JBQWUsQ0FBQztBQUduQyxPQUFTLE9BQUssQ0FBRSxHQUFFLENBQUcsQ0FBQSxHQUFFO0FBQ3JCLElBQUksT0FBSyxBQUFDLENBQUM7QUFDUCxRQUFJLENBQUcsQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQztBQUN4QixTQUFLLENBQUcsQ0FBQSxHQUFFLE1BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQztBQUFBLEVBQzVCLENBQUMsUUFDTSxLQUFLLEFBQUMsRUFBQyxLQUNWLEFBQUMsRUFBQyxTQUFBLEFBQUM7U0FBSyxDQUFBLEdBQUUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFDO0VBQUEsRUFBQyxLQUN2QixBQUFDLEVBQUMsQ0FBQztBQUNYO0FBR0EsT0FBUyxLQUFHLENBQUUsR0FBRSxDQUFHLENBQUEsR0FBRTtBQUNuQixPQUFLLFFBQVEsS0FBSyxBQUFDLEVBQUMsS0FDZCxBQUFDLEVBQUMsU0FBQyxPQUFNO1NBQU0sQ0FBQSxHQUFFLEtBQUssQUFBQyxDQUFDLE9BQU0sQ0FBQztFQUFBLEVBQUMsS0FDaEMsQUFBQyxFQUFDLENBQUM7QUFDWDtBQUVBLE9BQVMsS0FBRyxDQUFFLEdBQUUsQ0FBRyxDQUFBLEdBQUU7SUFDZixDQUFBLFFBQU8sRUFBSSxJQUFJLFNBQU8sQUFBQyxDQUFDLEdBQUUsTUFBTSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDM0MsY0FBUSxFQUFJLENBQUEsR0FBRSxNQUFNLEtBQUs7QUFFN0IsSUFBSSxLQUFHLEFBQUMsQ0FBQztBQUNMLFNBQUssQ0FBRyxTQUFPO0FBQ2YsT0FBRyxDQUFHLFVBQVE7QUFBQSxFQUNoQixDQUFDLFFBQ00sS0FBSyxBQUFDLEVBQUMsS0FDVixBQUFDLEVBQUMsU0FBQSxBQUFDO1NBQUssQ0FBQSxHQUFFLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQztFQUFBLEVBQUMsS0FDdkIsQUFBQyxFQUFDLENBQUM7QUFDWDtBQUdBLE9BQVMsS0FBRyxDQUFFLEdBQUUsQ0FBRyxDQUFBLEdBQUU7SUFDZixDQUFBLEtBQUksRUFBSSxDQUFBLEdBQUUsTUFBTSxBQUFDLENBQUMsT0FBTSxDQUFDO0FBRTdCLE9BQUssUUFBUSxRQUFRLEFBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBRyxNQUFJLENBQUMsQ0FBQyxLQUMvQixBQUFDLEVBQUMsU0FBQyxNQUFLO0FBQ1YsU0FBTyxDQUFBLElBQUcsUUFBUSxLQUFLLEFBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBRyxDQUFBLE1BQUssSUFBSSxDQUFDLENBQUMsS0FDdkMsQUFBQyxFQUFDLFNBQUMsS0FBSTtXQUFNLENBQUEsR0FBRSxLQUFLLEFBQUMsQ0FBQztBQUFDLGFBQUssQ0FBRyxPQUFLO0FBQUcsWUFBSSxDQUFHLE1BQUk7QUFBQSxNQUFDLENBQUM7SUFBQSxFQUFDLENBQUM7RUFDOUQsRUFBQyxLQUNHLEFBQUMsRUFBQyxDQUFDO0FBQ1g7QUFFQSxLQUFLLFFBQVEsRUFBSTtBQUNmLEtBQUcsQ0FBRyxLQUFHO0FBQ1QsS0FBRyxDQUFHLEtBQUc7QUFDVCxLQUFHLENBQUcsS0FBRztBQUNULE9BQUssQ0FBRyxPQUFLO0FBQUEsQUFDZixDQUFDO0FBRUQiLCJmaWxlIjoiY29udHJvbGxlcnMvYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7LyogVGhlIEFQSSBjb250cm9sbGVyXG4gICBFeHBvcnRzIDMgbWV0aG9kczpcbiAgICogcG9zdCAtIENyZWF0ZXMgYSBuZXcgdGhyZWFkXG4gICAqIGxpc3QgLSBSZXR1cm5zIGEgbGlzdCBvZiB0aHJlYWRzXG4gICAqIHNob3cgLSBEaXNwbGF5cyBhIHRocmVhZCBhbmQgaXRzIHBvc3RzXG4qL1xubGV0IE9iamVjdElkID0gcmVxdWlyZSgnbW9uZ29vc2UnKS5UeXBlcy5PYmplY3RJZCxcbiAgICBUaHJlYWQgPSByZXF1aXJlKCcuLi9tb2RlbHMvdGhyZWFkJyksXG4gICAgUG9zdCA9IHJlcXVpcmUoJy4uL21vZGVscy9wb3N0Jyk7XG5cbi8vIEdFVCAvdGhyZWFkLzp0aXRsZVxuZnVuY3Rpb24gdGhyZWFkKHJlcSwgcmVzKSB7XG4gIG5ldyBUaHJlYWQoe1xuICAgICAgdGl0bGU6IHJlcS5wYXJhbSgndGl0bGUnKSxcbiAgICAgIGF1dGhvcjogcmVxLnBhcmFtKCdhdXRob3InKVxuICAgIH0pXG4gICAgLnByb21pc2Uuc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gcmVzLmVuZCgnT2theScpKVxuICAgIC5kb25lKCk7XG59XG5cbi8vIEdFVCAvdGhyZWFkXG5mdW5jdGlvbiBsaXN0KHJlcSwgcmVzKSB7XG4gIFRocmVhZC5wcm9taXNlLmZpbmQoKVxuICAgIC50aGVuKCh0aHJlYWRzKSA9PiByZXMuc2VuZCh0aHJlYWRzKSlcbiAgICAuZG9uZSgpO1xufVxuXG5mdW5jdGlvbiBwb3N0KHJlcSwgcmVzKSB7XG4gIGxldCB0aHJlYWRJZCA9IG5ldyBPYmplY3RJZChyZXEucGFyYW0oJ3RocmVhZCcpKSxcbiAgICAgIHBvc3RWYWx1ZSA9IHJlcS5xdWVyeS5wb3N0O1xuXG4gIG5ldyBQb3N0KHtcbiAgICAgIHRocmVhZDogdGhyZWFkSWQsXG4gICAgICBwb3N0OiBwb3N0VmFsdWVcbiAgICB9KVxuICAgIC5wcm9taXNlLnNhdmUoKVxuICAgIC50aGVuKCgpID0+IHJlcy5lbmQoJ09rYXknKSlcbiAgICAuZG9uZSgpO1xufVxuXG4vLyBmaXJzdCBsb2NhdGVzIGEgdGhyZWFkIGJ5IHRpdGxlLCB0aGVuIGxvY2F0ZXMgdGhlIHJlcGxpZXMgYnkgdGhyZWFkIElELlxuZnVuY3Rpb24gc2hvdyhyZXEsIHJlcykge1xuICBsZXQgdGl0bGUgPSByZXEucGFyYW0oJ3RpdGxlJyk7XG5cbiAgVGhyZWFkLnByb21pc2UuZmluZE9uZSh7dGl0bGU6IHRpdGxlfSlcbiAgICAudGhlbigodGhyZWFkKSA9PiB7XG4gICAgICByZXR1cm4gUG9zdC5wcm9taXNlLmZpbmQoe3RocmVhZDogdGhyZWFkLl9pZH0pXG4gICAgICAgIC50aGVuKChwb3N0cykgPT4gcmVzLnNlbmQoe3RocmVhZDogdGhyZWFkLCBwb3N0czogcG9zdHN9KSk7XG4gICAgfSlcbiAgICAuZG9uZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zdDogcG9zdCxcbiAgbGlzdDogbGlzdCxcbiAgc2hvdzogc2hvdyxcbiAgdGhyZWFkOiB0aHJlYWRcbn07XG5cbiJdfQ==