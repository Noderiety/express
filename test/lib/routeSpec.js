"use strict";
require('traceur-source-maps').install(require('traceur'));
var superagent = require('supertest'),
    _ = require('lodash'),
    app = require('../../index');
require('chai').should();
function request() {
  return superagent(app.server);
}
describe('Routes', (function() {
  describe('GET /', (function() {
    it('should return 200', (function(done) {
      request().get('/').expect(200, done);
    }));
  }));
  describe('GET /thread', (function() {
    it('should return all threads', (function(done) {
      request().get('/thread').expect('Content-Type', /json/).expect((function(res) {
        res.body.should.be.an('array');
        var thread = res.body[0];
        thread.should.have.property('title');
        thread.should.have.property('author');
        thread.should.have.property('title');
      })).expect(200, done);
    }));
  }));
  describe('GET /thread/:title', (function() {
    before((function() {
      console.log('before');
    }));
    beforeEach((function() {
      return console.log('beforeEach');
    }));
    after((function() {
      console.log('after');
    }));
    afterEach((function() {
      return console.log('afterEach');
    }));
    it('should return a thread with the given title', (function(done) {
      request().get('/thread/Hello').expect('Content-Type', /json/).expect((function(res) {
        var thread = res.body;
        thread.thread.should.have.property('title');
        thread.thread.should.have.property('author');
        thread.thread.should.have.property('title');
        _.each(thread.posts, (function(post) {
          post.thread.should.eql(thread.thread._id);
          post.should.have.property('post');
          post.should.have.property('author');
          post.should.have.property('date');
        }));
      })).expect(200);
    }));
  }));
}));

//# sourceMappingURL=data:application/json;base64,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QUVwQixhQUFLLE9BQU8sT0FBTyxLQUFLLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO0FBQzNDLGFBQUssT0FBTyxPQUFPLEtBQUssU0FBUyxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDNUMsYUFBSyxPQUFPLE9BQU8sS0FBSyxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztBQUUzQyxRQUFBLEtBQUssQUFBQyxDQUFDLE1BQUssTUFBTSxHQUFHLFNBQUMsSUFBRyxDQUFNO0FBQzdCLGFBQUcsT0FBTyxPQUFPLElBQUksQUFBQyxDQUFDLE1BQUssT0FBTyxJQUFJLENBQUMsQ0FBQztBQUN6QyxhQUFHLE9BQU8sS0FBSyxTQUFTLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUNqQyxhQUFHLE9BQU8sS0FBSyxTQUFTLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUNuQyxhQUFHLE9BQU8sS0FBSyxTQUFTLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztRQUNuQyxFQUFDLENBQUM7TUFDSixFQUFDLE9BQ0ssQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0lBQ2hCLEVBQUMsQ0FBQztFQUNKLEVBQUMsQ0FBQztBQUNKLEVBQUMsQ0FBQztBQUNGIiwiZmlsZSI6InJvdXRlU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7LypnbG9iYWwgZGVzY3JpYmUsIGl0LCBiZWZvcmUsIGJlZm9yZUVhY2gsIGFmdGVyLCBhZnRlckVhY2gqL1xubGV0IHN1cGVyYWdlbnQgPSByZXF1aXJlKCdzdXBlcnRlc3QnKSxcbiAgICBfID0gcmVxdWlyZSgnbG9kYXNoJyksXG4gICAgYXBwID0gcmVxdWlyZSgnLi4vLi4vaW5kZXgnKTtcblxucmVxdWlyZSgnY2hhaScpLnNob3VsZCgpO1xuXG5mdW5jdGlvbiByZXF1ZXN0KCkge1xuICByZXR1cm4gc3VwZXJhZ2VudChhcHAuc2VydmVyKTtcbn1cblxuZGVzY3JpYmUoJ1JvdXRlcycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ0dFVCAvJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIDIwMCcsIChkb25lKSA9PiB7XG4gICAgICByZXF1ZXN0KClcbiAgICAgICAgLmdldCgnLycpXG4gICAgICAgIC5leHBlY3QoMjAwLCBkb25lKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvdGhyZWFkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFsbCB0aHJlYWRzJywgKGRvbmUpID0+IHtcbiAgICAgIHJlcXVlc3QoKVxuICAgICAgICAuZ2V0KCcvdGhyZWFkJylcbiAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKVxuICAgICAgICAuZXhwZWN0KChyZXMpID0+IHtcbiAgICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYW4oJ2FycmF5Jyk7XG4gICAgICAgICAgbGV0IHRocmVhZCA9IHJlcy5ib2R5WzBdO1xuICAgICAgICAgIHRocmVhZC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgndGl0bGUnKTtcbiAgICAgICAgICB0aHJlYWQuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2F1dGhvcicpO1xuICAgICAgICAgIHRocmVhZC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgndGl0bGUnKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCgyMDAsIGRvbmUpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ0dFVCAvdGhyZWFkLzp0aXRsZScsICgpID0+IHtcbiAgICAvLyBsZXQgZGJDb25uZWN0aW9uO1xuXG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgIC8vIFNldHVwIHlvdXIgREIgY29ubmVjdGlvblxuICAgICAgLy8gZGJDb25uZWN0aW9uID0gbW9uZ29vc2UuY29ubmVjdCguLi4pXG4gICAgICBjb25zb2xlLmxvZygnYmVmb3JlJyk7XG4gICAgfSk7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiBjb25zb2xlLmxvZygnYmVmb3JlRWFjaCcpKTtcbiAgICBhZnRlcigoKSA9PiB7XG4gICAgICAvLyBkYkNvbm5lY3Rpb24uY2xvc2UoZG9uZSlcbiAgICAgIGNvbnNvbGUubG9nKCdhZnRlcicpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKSA9PiBjb25zb2xlLmxvZygnYWZ0ZXJFYWNoJykpO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSB0aHJlYWQgd2l0aCB0aGUgZ2l2ZW4gdGl0bGUnLCAoZG9uZSkgPT4ge1xuICAgICAgcmVxdWVzdCgpXG4gICAgICAgIC5nZXQoJy90aHJlYWQvSGVsbG8nKVxuICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pXG4gICAgICAgIC5leHBlY3QoKHJlcykgPT4ge1xuICAgICAgICAgIGxldCB0aHJlYWQgPSByZXMuYm9keTtcblxuICAgICAgICAgIHRocmVhZC50aHJlYWQuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3RpdGxlJyk7XG4gICAgICAgICAgdGhyZWFkLnRocmVhZC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYXV0aG9yJyk7XG4gICAgICAgICAgdGhyZWFkLnRocmVhZC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgndGl0bGUnKTtcblxuICAgICAgICAgIF8uZWFjaCh0aHJlYWQucG9zdHMsIChwb3N0KSA9PiB7XG4gICAgICAgICAgICBwb3N0LnRocmVhZC5zaG91bGQuZXFsKHRocmVhZC50aHJlYWQuX2lkKTtcbiAgICAgICAgICAgIHBvc3Quc2hvdWxkLmhhdmUucHJvcGVydHkoJ3Bvc3QnKTtcbiAgICAgICAgICAgIHBvc3Quc2hvdWxkLmhhdmUucHJvcGVydHkoJ2F1dGhvcicpO1xuICAgICAgICAgICAgcG9zdC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnZGF0ZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=