"use strict";
require('traceur-source-maps').install(require('traceur'));
console.log(process.env.NODE_ENV);
var superagent = require('supertest'),
    _ = require('lodash'),
    app = require('../../index'),
    chai = require('chai'),
    sinon = require('sinon');
chai.should();
chai.use(require('chai-datetime'));
function request() {
  return superagent(app.server);
}
describe('Routes', (function() {
  before((function() {
    return app.initialize();
  }));
  describe('GET /', (function() {
    it('should return 200', (function(done) {
      request().get('/').expect(200, done);
    }));
  }));
  describe('GET /thread', (function() {
    it('should return all threads', (function(done) {
      request().get('/thread').expect('Content-Type', /json/).expect((function(res) {
        var threads = res.body;
        _.each(threads, (function(thread) {
          thread.should.have.a.property('title').and.should.be.a.string;
          thread.should.have.a.property('author');
          thread.should.have.a.property('postdate');
          isNaN(Date.parse(thread.postdate)).should.be.false;
        }));
      })).expect(200, done);
    }));
    it.only('spy', (function() {
      var object = {method: (function() {})};
      var spy = sinon.spy(fs, 'readFile');
      object.method(42);
      object.method(42);
      object.method(42);
      object.method(42);
      object.method(42);
      object.method(1);
      console.log('spy.withArgs(1).calledOnce: ', spy.withArgs(1).calledOnce);
      spy.callCount.should.equal(0);
      spy.withArgs(1).calledOnce.should.be.true;
    }));
  }));
  describe('GET /thread/:title', (function() {
    before((function() {}));
    beforeEach((function() {
      return console.log('beforeEach');
    }));
    after((function() {}));
    afterEach((function() {
      return console.log('afterEach');
    }));
    it('should return a thread with the given title', (function(done) {
      request().get('/thread/Hello').expect('Content-Type', /json/).expect((function(res) {
        var thread = res.body;
        thread.thread.should.have.property('title');
        thread.thread.should.have.property('author');
        thread.thread.should.have.property('title');
        _.each(thread.posts, (function(post) {
          post.thread.should.eql(thread.thread._id);
          post.should.have.property('post');
          post.should.have.property('author');
          post.should.have.property('date');
        }));
      })).expect(200, done);
    }));
  }));
}));

//# sourceMappingURL=data:application/json;base64,