"use strict";
require('traceur-source-maps').install(require('traceur'));
var superagent = require('supertest'),
    _ = require('lodash'),
    app = require('../../index');
require('chai').should();
function request() {
  return superagent(app.server);
}
describe('Routes', (function() {
  before((function() {
    return app.initialize();
  }));
  describe('GET /', (function() {
    it('should return 200', (function(done) {
      request().get('/').expect(200, done);
    }));
  }));
  describe('GET /thread', (function() {
    it('should return all threads', (function(done) {
      request().get('/thread').expect('Content-Type', /json/).expect((function(res) {
        res.body.should.be.an('array');
        var thread = res.body[0];
        thread.should.have.a.property('title').and.should.be.a.string;
        thread.should.have.a.property('author');
        thread.should.have.a.property('postdate');
      })).expect(200, done);
    }));
  }));
  describe('GET /thread/:title', (function() {
    before((function() {}));
    beforeEach((function() {
      return console.log('beforeEach');
    }));
    after((function() {}));
    afterEach((function() {
      return console.log('afterEach');
    }));
    it('should return a thread with the given title', (function(done) {
      request().get('/thread/Hello').expect('Content-Type', /json/).expect((function(res) {
        var thread = res.body;
        thread.thread.should.have.property('title');
        thread.thread.should.have.property('author');
        thread.thread.should.have.property('title');
        _.each(thread.posts, (function(post) {
          post.thread.should.eql(thread.thread._id);
          post.should.have.property('post');
          post.should.have.property('author');
          post.should.have.property('date');
        }));
      })).expect(200, done);
    }));
  }));
}));

//# sourceMappingURL=data:application/json;base64,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QUMsU0FBQyxHQUFFO1VBQ0wsQ0FBQSxNQUFLLEVBQUksQ0FBQSxHQUFFLEtBQUs7QUFFcEIsYUFBSyxPQUFPLE9BQU8sS0FBSyxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztBQUMzQyxhQUFLLE9BQU8sT0FBTyxLQUFLLFNBQVMsQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQzVDLGFBQUssT0FBTyxPQUFPLEtBQUssU0FBUyxBQUFDLENBQUMsT0FBTSxDQUFDLENBQUM7QUFFM0MsUUFBQSxLQUFLLEFBQUMsQ0FBQyxNQUFLLE1BQU0sR0FBRyxTQUFDLElBQUcsQ0FBTTtBQUM3QixhQUFHLE9BQU8sT0FBTyxJQUFJLEFBQUMsQ0FBQyxNQUFLLE9BQU8sSUFBSSxDQUFDLENBQUM7QUFDekMsYUFBRyxPQUFPLEtBQUssU0FBUyxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7QUFDakMsYUFBRyxPQUFPLEtBQUssU0FBUyxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDbkMsYUFBRyxPQUFPLEtBQUssU0FBUyxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7UUFDbkMsRUFBQyxDQUFDO01BQ0osRUFBQyxPQUNLLEFBQUMsQ0FBQyxHQUFFLENBQUcsS0FBRyxDQUFDLENBQUM7SUFDdEIsRUFBQyxDQUFDO0VBQ0osRUFBQyxDQUFDO0FBQ0osRUFBQyxDQUFDO0FBQ0YiLCJmaWxlIjoicm91dGVTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgndHJhY2V1ci1zb3VyY2UtbWFwcycpLmluc3RhbGwocmVxdWlyZSgndHJhY2V1cicpKTsvKiBnbG9iYWwgZGVzY3JpYmUsIGl0LCBiZWZvcmUsIGJlZm9yZUVhY2gsIGFmdGVyLCBhZnRlckVhY2ggKi9cbi8qIGpzaGludCBleHByOiB0cnVlICovXG5sZXQgc3VwZXJhZ2VudCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpLFxuICAgIF8gPSByZXF1aXJlKCdsb2Rhc2gnKSxcbiAgICBhcHAgPSByZXF1aXJlKCcuLi8uLi9pbmRleCcpO1xuXG5yZXF1aXJlKCdjaGFpJykuc2hvdWxkKCk7XG5cbmZ1bmN0aW9uIHJlcXVlc3QoKSB7XG4gIHJldHVybiBzdXBlcmFnZW50KGFwcC5zZXJ2ZXIpO1xufVxuXG5kZXNjcmliZSgnUm91dGVzJywgKCkgPT4ge1xuICBiZWZvcmUoKCkgPT4ge1xuICAgIHJldHVybiBhcHAuaW5pdGlhbGl6ZSgpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0dFVCAvJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIDIwMCcsIChkb25lKSA9PiB7XG4gICAgICByZXF1ZXN0KClcbiAgICAgICAgLmdldCgnLycpXG4gICAgICAgIC5leHBlY3QoMjAwLCBkb25lKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvdGhyZWFkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFsbCB0aHJlYWRzJywgKGRvbmUpID0+IHtcbiAgICAgIHJlcXVlc3QoKVxuICAgICAgICAuZ2V0KCcvdGhyZWFkJylcbiAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKVxuICAgICAgICAuZXhwZWN0KChyZXMpID0+IHtcbiAgICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYW4oJ2FycmF5Jyk7XG4gICAgICAgICAgbGV0IHRocmVhZCA9IHJlcy5ib2R5WzBdO1xuICAgICAgICAgIHRocmVhZC5zaG91bGQuaGF2ZS5hLnByb3BlcnR5KCd0aXRsZScpLmFuZC5zaG91bGQuYmUuYS5zdHJpbmc7XG4gICAgICAgICAgdGhyZWFkLnNob3VsZC5oYXZlLmEucHJvcGVydHkoJ2F1dGhvcicpO1xuICAgICAgICAgIHRocmVhZC5zaG91bGQuaGF2ZS5hLnByb3BlcnR5KCdwb3N0ZGF0ZScpO1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDIwMCwgZG9uZSk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnR0VUIC90aHJlYWQvOnRpdGxlJywgKCkgPT4ge1xuICAgIC8vIGxldCBkYkNvbm5lY3Rpb247XG5cbiAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgLy8gU2V0dXAgeW91ciBEQiBjb25uZWN0aW9uXG4gICAgICAvLyBkYkNvbm5lY3Rpb24gPSBtb25nb29zZS5jb25uZWN0KC4uLilcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdiZWZvcmUnKTtcbiAgICB9KTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IGNvbnNvbGUubG9nKCdiZWZvcmVFYWNoJykpO1xuICAgIGFmdGVyKCgpID0+IHtcbiAgICAgIC8vIGRiQ29ubmVjdGlvbi5jbG9zZShkb25lKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2FmdGVyJyk7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKCgpID0+IGNvbnNvbGUubG9nKCdhZnRlckVhY2gnKSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHRocmVhZCB3aXRoIHRoZSBnaXZlbiB0aXRsZScsIChkb25lKSA9PiB7XG4gICAgICByZXF1ZXN0KClcbiAgICAgICAgLmdldCgnL3RocmVhZC9IZWxsbycpXG4gICAgICAgIC5leHBlY3QoJ0NvbnRlbnQtVHlwZScsIC9qc29uLylcbiAgICAgICAgLmV4cGVjdCgocmVzKSA9PiB7XG4gICAgICAgICAgbGV0IHRocmVhZCA9IHJlcy5ib2R5O1xuXG4gICAgICAgICAgdGhyZWFkLnRocmVhZC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgndGl0bGUnKTtcbiAgICAgICAgICB0aHJlYWQudGhyZWFkLnNob3VsZC5oYXZlLnByb3BlcnR5KCdhdXRob3InKTtcbiAgICAgICAgICB0aHJlYWQudGhyZWFkLnNob3VsZC5oYXZlLnByb3BlcnR5KCd0aXRsZScpO1xuXG4gICAgICAgICAgXy5lYWNoKHRocmVhZC5wb3N0cywgKHBvc3QpID0+IHtcbiAgICAgICAgICAgIHBvc3QudGhyZWFkLnNob3VsZC5lcWwodGhyZWFkLnRocmVhZC5faWQpO1xuICAgICAgICAgICAgcG9zdC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgncG9zdCcpO1xuICAgICAgICAgICAgcG9zdC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYXV0aG9yJyk7XG4gICAgICAgICAgICBwb3N0LnNob3VsZC5oYXZlLnByb3BlcnR5KCdkYXRlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwLCBkb25lKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==